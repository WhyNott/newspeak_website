= javascript_include_tag 'graphs'

:javascript
  $(function () {
    'use strict';

    var data = #{@graph.to_json};

    var container = document.getElementById('sigma-container');

    var options = {
      width: '100%',
      height: '600px',
      selectable: true,
      hover: true,

      edges: {
        width: 1,
        widthMax: 2,
        inheritColor: 'from'
      },

      nodes: {
        shape: 'dot',
        fontFace: 'akkuratRegular',
        color: {
          border: '#555',
          background: '#666',
          highlight: {
            background: '#C02D25',
            border: '#87201a'
          }
        }
      },

      tooltip: {
        fontFace: 'akkuratLight',
        fontColor: '#fff',
        color: {
          border: '#000',
          background: '#111'
        }
      },

      groups: {}
    };

    var colorSwatch = [['#556270', '#3f4953'], ['#4ECDC4', '#33b5ac'], ['#C7F464', '#b6f134'], ['#FF6B6B', '#ff3838'], ['#C44D58', '#a73742']],
      uniqColorCounter = 0,
      nodeMap = {};

    data.nodes.forEach(function (n) {
      nodeMap[n.id] = n;

      if (typeof options.groups[n.group] === 'undefined') {
        var swatch = colorSwatch[uniqColorCounter % colorSwatch.length];

        options.groups[n.group] = {
          color: {
            border: swatch[1],
            background: swatch[0],
            hover: {
              border: swatch[1],
              background: swatch[0]
            }
          }
        };

        uniqColorCounter++;
      }
    });

    var network = new vis.Network(container, data, options);

    if (data.center != null) {
      network.focusOnNode(data.center, {
        scale: 0.9,
        animation: {
          duration: 1500,
          easingFunction: 'easeInOutQuint'
        }
      });
    }

    network.on('select', function (props) {
      if (props.nodes.length === 0) {
        return;
      }

      var url = nodeMap[props.nodes[0]].meta.url;

      if (url.length > 0) {
        window.open(url, '_blank');
      }
    });

    network.on('hoverNode', function (props) {
      if (nodeMap[props.node].meta.url.length > 0) {
        $(container).addClass('clickable');
      }
    });

    network.on('blurNode', function () {
      $(container).removeClass('clickable');
    });

    $(window).on('resize', function () {
      network.redraw();
    });
  });
